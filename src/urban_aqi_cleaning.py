"""author: Robin Shindelmandate: 2025-02-07description: Urban AQI data cleaning"""import pandas as pdimport numpy as npimport seaborn as snsimport matplotlib.pyplot as plt# ----------------------------------------------------------------------------# Importdf = pd.read_csv("../data/raw/Urban Air Quality/Urban Air Quality and Health Impact Dataset.csv")# Uneeded colsdf = df.drop(['datetimeEpoch', 'sunriseEpoch', 'sunsetEpoch', 'moonphase',               'description', 'icon', 'stations', 'source', 'Condition_Code',              'preciptype', 'snow', 'snowdepth', 'Season'],             axis=1)# ----------------------------------------------------------------------------# Visualize EDA# Health score vs Day & Citysns.catplot(data=df, x='Day_of_Week', y='Health_Risk_Score',             hue='City', size=2.5, kind="swarm")plt.xticks(rotation=45)plt.title("Beeswarm plot of AQ risk by day of the week and city")plt.ylabel("Health Risk Score")plt.xlabel("Day")plt.show()ax = sns.scatterplot(data=df, x='Severity_Score', y='Health_Risk_Score', hue='City')sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1))plt.title("Scatterplot of AQ risk vs weather severity and city")plt.ylabel("Health Risk Score")plt.xlabel("Weather Severity Score")plt.show()ax = sns.countplot(data=df, x='conditions', hue='City')sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1))plt.xticks(rotation=45)plt.title("Barchart of conditions by city")plt.ylabel("Count")plt.xlabel("Conditions")plt.show()# ----------------------------------------------------------------------------# Data Types# Datetimedf.datetime = pd.to_datetime(df.datetime)# Categoriesdf.conditions = df.conditions.astype('category')df.City = df.City.astype('category')df.Day_of_Week = df.Day_of_Week.astype('category')# Numbersdf.Month = df.Month.astype('int64')# ----------------------------------------------------------------------------# Null valuesdf.isna().sum()# ----------------------------------------------------------------------------# Outliersquantifiable = ['tempmax', 'tempmin', 'temp', 'feelslikemax', 'feelslikemin',                 'feelslike', 'dew', 'humidity', 'precip', 'precipprob',                 'precipcover', 'windgust', 'windspeed', 'winddir', 'pressure',                'cloudcover', 'visibility', 'solarradiation', 'solarenergy',                 'uvindex', 'severerisk','Temp_Range', 'Heat_Index',                 'Severity_Score','Health_Risk_Score']q1 = df[quantifiable].quantile(0.25)q3 = df[quantifiable].quantile(0.75)iqr = q3 - q1outliers = ((df[quantifiable] < (q1 - 1.5 * iqr)) | (df[quantifiable] > (q3 + 1.5 * iqr)))sns.boxplot(data=outliers)plt.xticks(rotation=90)plt.show()further_investigation = ['dew', 'humidity', 'precip', 'precipprob',                         'precipcover', 'windgust', 'windspeed', 'solarradiation',                          'solarenergy', 'uvindex', 'severerisk','Temp_Range',                          'Severity_Score']for col in further_investigation:    sns.boxplot(data=df, x=col)    plt.show()    plt.title(f"{col}")    # Clean out a couple of outliersdf = df[df.dew > 27]df = df[df.windspeed < 19]# ----------------------------------------------------------------------------# Export to csvdf.to_csv("../data/clean/Urban Air Quality/urban_aqi_health_clean.csv")